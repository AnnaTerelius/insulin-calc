{
  "{\"sourceRoot\":\"/mnt/c/Users/terel/OneDrive/Skrivbord/technigo/insulin-calc/backend\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/mnt/c/Users/terel/OneDrive/Skrivbord/technigo/insulin-calc/backend\",\"filename\":\"/mnt/c/Users/terel/OneDrive/Skrivbord/technigo/insulin-calc/backend/server.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/mnt/c/Users/terel/OneDrive/Skrivbord/technigo/insulin-calc/backend\",\"plugins\":[],\"presets\":[]}:7.8.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "/mnt/c/Users/terel/OneDrive/Skrivbord/technigo/insulin-calc/backend",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/mnt/c/Users/terel/OneDrive/Skrivbord/technigo/insulin-calc/backend",
      "filename": "/mnt/c/Users/terel/OneDrive/Skrivbord/technigo/insulin-calc/backend/server.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/mnt/c/Users/terel/OneDrive/Skrivbord/technigo/insulin-calc/backend",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/mnt/c/Users/terel/OneDrive/Skrivbord/technigo/insulin-calc/backend/server.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/mnt/c/Users/terel/OneDrive/Skrivbord/technigo/insulin-calc/backend/server.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/mnt/c/Users/terel/OneDrive/Skrivbord/technigo/insulin-calc/backend",
        "sourceFileName": "server.js"
      }
    },
    "ast": null,
    "code": "import express from 'express';\nimport bodyParser from 'body-parser';\nimport cors from 'cors';\nimport mongoose from 'mongoose';\nconst mongoUrl = process.env.MONGO_URL || \"mongodb://localhost/insulin-calc\";\nmongoose.connect(mongoUrl, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\nmongoose.Promise = Promise; // Defines the port the app will run on. Defaults to 8080, but can be \n// overridden when starting the server. For example:\n//\n//   PORT=9000 npm start\n\nconst port = process.env.PORT || 3000;\nconst app = express(); // Add middlewares to enable cors and json body parsing\n\napp.use(cors());\napp.use(bodyParser.json()); // Start defining your routes here\n\napp.get('/', (req, res) => {\n  res.send('Hello world insulin-calc');\n}); // Start the server\n\napp.listen(port, () => {\n  console.log(`Server running on http://localhost:${port}`);\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlci5qcyJdLCJuYW1lcyI6WyJleHByZXNzIiwiYm9keVBhcnNlciIsImNvcnMiLCJtb25nb29zZSIsIm1vbmdvVXJsIiwicHJvY2VzcyIsImVudiIsIk1PTkdPX1VSTCIsImNvbm5lY3QiLCJ1c2VOZXdVcmxQYXJzZXIiLCJ1c2VVbmlmaWVkVG9wb2xvZ3kiLCJQcm9taXNlIiwicG9ydCIsIlBPUlQiLCJhcHAiLCJ1c2UiLCJqc29uIiwiZ2V0IiwicmVxIiwicmVzIiwic2VuZCIsImxpc3RlbiIsImNvbnNvbGUiLCJsb2ciXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLE9BQVAsTUFBb0IsU0FBcEI7QUFDQSxPQUFPQyxVQUFQLE1BQXVCLGFBQXZCO0FBQ0EsT0FBT0MsSUFBUCxNQUFpQixNQUFqQjtBQUNBLE9BQU9DLFFBQVAsTUFBcUIsVUFBckI7QUFFQSxNQUFNQyxRQUFRLEdBQUdDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxTQUFaLElBQXlCLGtDQUExQztBQUNBSixRQUFRLENBQUNLLE9BQVQsQ0FBaUJKLFFBQWpCLEVBQTJCO0FBQUVLLEVBQUFBLGVBQWUsRUFBRSxJQUFuQjtBQUF5QkMsRUFBQUEsa0JBQWtCLEVBQUU7QUFBN0MsQ0FBM0I7QUFDQVAsUUFBUSxDQUFDUSxPQUFULEdBQW1CQSxPQUFuQixDLENBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsTUFBTUMsSUFBSSxHQUFHUCxPQUFPLENBQUNDLEdBQVIsQ0FBWU8sSUFBWixJQUFvQixJQUFqQztBQUNBLE1BQU1DLEdBQUcsR0FBR2QsT0FBTyxFQUFuQixDLENBR0E7O0FBQ0FjLEdBQUcsQ0FBQ0MsR0FBSixDQUFRYixJQUFJLEVBQVo7QUFDQVksR0FBRyxDQUFDQyxHQUFKLENBQVFkLFVBQVUsQ0FBQ2UsSUFBWCxFQUFSLEUsQ0FHQTs7QUFDQUYsR0FBRyxDQUFDRyxHQUFKLENBQVEsR0FBUixFQUFhLENBQUNDLEdBQUQsRUFBTUMsR0FBTixLQUFjO0FBQ3pCQSxFQUFBQSxHQUFHLENBQUNDLElBQUosQ0FBUywwQkFBVDtBQUNELENBRkQsRSxDQUtBOztBQUNBTixHQUFHLENBQUNPLE1BQUosQ0FBV1QsSUFBWCxFQUFpQixNQUFNO0FBQ25CVSxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBYSxzQ0FBcUNYLElBQUssRUFBdkQ7QUFDRCxDQUZIIiwic291cmNlUm9vdCI6Ii9tbnQvYy9Vc2Vycy90ZXJlbC9PbmVEcml2ZS9Ta3JpdmJvcmQvdGVjaG5pZ28vaW5zdWxpbi1jYWxjL2JhY2tlbmQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZXhwcmVzcyBmcm9tICdleHByZXNzJ1xyXG5pbXBvcnQgYm9keVBhcnNlciBmcm9tICdib2R5LXBhcnNlcidcclxuaW1wb3J0IGNvcnMgZnJvbSAnY29ycydcclxuaW1wb3J0IG1vbmdvb3NlIGZyb20gJ21vbmdvb3NlJ1xyXG5cclxuY29uc3QgbW9uZ29VcmwgPSBwcm9jZXNzLmVudi5NT05HT19VUkwgfHwgXCJtb25nb2RiOi8vbG9jYWxob3N0L2luc3VsaW4tY2FsY1wiXHJcbm1vbmdvb3NlLmNvbm5lY3QobW9uZ29VcmwsIHsgdXNlTmV3VXJsUGFyc2VyOiB0cnVlLCB1c2VVbmlmaWVkVG9wb2xvZ3k6IHRydWUgfSlcclxubW9uZ29vc2UuUHJvbWlzZSA9IFByb21pc2VcclxuXHJcblxyXG4vLyBEZWZpbmVzIHRoZSBwb3J0IHRoZSBhcHAgd2lsbCBydW4gb24uIERlZmF1bHRzIHRvIDgwODAsIGJ1dCBjYW4gYmUgXHJcbi8vIG92ZXJyaWRkZW4gd2hlbiBzdGFydGluZyB0aGUgc2VydmVyLiBGb3IgZXhhbXBsZTpcclxuLy9cclxuLy8gICBQT1JUPTkwMDAgbnBtIHN0YXJ0XHJcbmNvbnN0IHBvcnQgPSBwcm9jZXNzLmVudi5QT1JUIHx8IDMwMDBcclxuY29uc3QgYXBwID0gZXhwcmVzcygpXHJcblxyXG5cclxuLy8gQWRkIG1pZGRsZXdhcmVzIHRvIGVuYWJsZSBjb3JzIGFuZCBqc29uIGJvZHkgcGFyc2luZ1xyXG5hcHAudXNlKGNvcnMoKSlcclxuYXBwLnVzZShib2R5UGFyc2VyLmpzb24oKSlcclxuXHJcblxyXG4vLyBTdGFydCBkZWZpbmluZyB5b3VyIHJvdXRlcyBoZXJlXHJcbmFwcC5nZXQoJy8nLCAocmVxLCByZXMpID0+IHtcclxuICByZXMuc2VuZCgnSGVsbG8gd29ybGQgaW5zdWxpbi1jYWxjJylcclxufSlcclxuXHJcblxyXG4vLyBTdGFydCB0aGUgc2VydmVyXHJcbmFwcC5saXN0ZW4ocG9ydCwgKCkgPT4ge1xyXG4gICAgY29uc29sZS5sb2coYFNlcnZlciBydW5uaW5nIG9uIGh0dHA6Ly9sb2NhbGhvc3Q6JHtwb3J0fWApXHJcbiAgfSkiXX0=",
    "map": {
      "version": 3,
      "sources": [
        "server.js"
      ],
      "names": [
        "express",
        "bodyParser",
        "cors",
        "mongoose",
        "mongoUrl",
        "process",
        "env",
        "MONGO_URL",
        "connect",
        "useNewUrlParser",
        "useUnifiedTopology",
        "Promise",
        "port",
        "PORT",
        "app",
        "use",
        "json",
        "get",
        "req",
        "res",
        "send",
        "listen",
        "console",
        "log"
      ],
      "mappings": "AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,QAAP,MAAqB,UAArB;AAEA,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYC,SAAZ,IAAyB,kCAA1C;AACAJ,QAAQ,CAACK,OAAT,CAAiBJ,QAAjB,EAA2B;AAAEK,EAAAA,eAAe,EAAE,IAAnB;AAAyBC,EAAAA,kBAAkB,EAAE;AAA7C,CAA3B;AACAP,QAAQ,CAACQ,OAAT,GAAmBA,OAAnB,C,CAGA;AACA;AACA;AACA;;AACA,MAAMC,IAAI,GAAGP,OAAO,CAACC,GAAR,CAAYO,IAAZ,IAAoB,IAAjC;AACA,MAAMC,GAAG,GAAGd,OAAO,EAAnB,C,CAGA;;AACAc,GAAG,CAACC,GAAJ,CAAQb,IAAI,EAAZ;AACAY,GAAG,CAACC,GAAJ,CAAQd,UAAU,CAACe,IAAX,EAAR,E,CAGA;;AACAF,GAAG,CAACG,GAAJ,CAAQ,GAAR,EAAa,CAACC,GAAD,EAAMC,GAAN,KAAc;AACzBA,EAAAA,GAAG,CAACC,IAAJ,CAAS,0BAAT;AACD,CAFD,E,CAKA;;AACAN,GAAG,CAACO,MAAJ,CAAWT,IAAX,EAAiB,MAAM;AACnBU,EAAAA,OAAO,CAACC,GAAR,CAAa,sCAAqCX,IAAK,EAAvD;AACD,CAFH",
      "sourceRoot": "/mnt/c/Users/terel/OneDrive/Skrivbord/technigo/insulin-calc/backend",
      "sourcesContent": [
        "import express from 'express'\r\nimport bodyParser from 'body-parser'\r\nimport cors from 'cors'\r\nimport mongoose from 'mongoose'\r\n\r\nconst mongoUrl = process.env.MONGO_URL || \"mongodb://localhost/insulin-calc\"\r\nmongoose.connect(mongoUrl, { useNewUrlParser: true, useUnifiedTopology: true })\r\nmongoose.Promise = Promise\r\n\r\n\r\n// Defines the port the app will run on. Defaults to 8080, but can be \r\n// overridden when starting the server. For example:\r\n//\r\n//   PORT=9000 npm start\r\nconst port = process.env.PORT || 3000\r\nconst app = express()\r\n\r\n\r\n// Add middlewares to enable cors and json body parsing\r\napp.use(cors())\r\napp.use(bodyParser.json())\r\n\r\n\r\n// Start defining your routes here\r\napp.get('/', (req, res) => {\r\n  res.send('Hello world insulin-calc')\r\n})\r\n\r\n\r\n// Start the server\r\napp.listen(port, () => {\r\n    console.log(`Server running on http://localhost:${port}`)\r\n  })"
      ]
    },
    "sourceType": "module",
    "mtime": 1583066748475
  },
  "{\"sourceRoot\":\"/mnt/c/Users/terel/OneDrive/Skrivbord/technigo/insulin-calc/backend\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/mnt/c/Users/terel/OneDrive/Skrivbord/technigo/insulin-calc/backend\",\"filename\":\"/mnt/c/Users/terel/OneDrive/Skrivbord/technigo/insulin-calc/backend/server.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/mnt/c/Users/terel/OneDrive/Skrivbord/technigo/insulin-calc/backend\",\"plugins\":[{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.8.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "/mnt/c/Users/terel/OneDrive/Skrivbord/technigo/insulin-calc/backend",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/mnt/c/Users/terel/OneDrive/Skrivbord/technigo/insulin-calc/backend",
      "filename": "/mnt/c/Users/terel/OneDrive/Skrivbord/technigo/insulin-calc/backend/server.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/mnt/c/Users/terel/OneDrive/Skrivbord/technigo/insulin-calc/backend",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/mnt/c/Users/terel/OneDrive/Skrivbord/technigo/insulin-calc/backend/server.js",
        "plugins": [
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "/mnt/c/Users/terel/OneDrive/Skrivbord/technigo/insulin-calc/backend/server.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/mnt/c/Users/terel/OneDrive/Skrivbord/technigo/insulin-calc/backend",
        "sourceFileName": "server.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _express = _interopRequireDefault(require(\"express\"));\n\nvar _bodyParser = _interopRequireDefault(require(\"body-parser\"));\n\nvar _cors = _interopRequireDefault(require(\"cors\"));\n\nvar _mongoose = _interopRequireDefault(require(\"mongoose\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar mongoUrl = process.env.MONGO_URL || \"mongodb://localhost/insulin\";\n\n_mongoose[\"default\"].connect(mongoUrl, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\n\n_mongoose[\"default\"].Promise = Promise;\nconsole.log('Starting backend');\n\nvar BloodSugar = _mongoose[\"default\"].model('BloodSugar', {\n  value: {\n    type: Number,\n    required: true\n  },\n  createdAt: {\n    type: Date,\n    \"default\": Date.now\n  }\n}); // Defines the port the app will run on. Defaults to 8080, but can be \n// overridden when starting the server. For example:\n//\n//   PORT=9000 npm start\n\n\nvar port = process.env.PORT || 9090;\nvar app = (0, _express[\"default\"])(); // Add middlewares to enable cors and json body parsing\n\napp.use((0, _cors[\"default\"])());\napp.use(_bodyParser[\"default\"].json()); // Start defining your routes here\n\napp.get('/', function (req, res) {\n  res.send('Hello world insulin-calc');\n});\napp.post('/bloodsugars', /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(req, res) {\n    var value, bloodSugar, savedBloodSugar;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            value = req.body.value;\n            console.log(_typeof(value));\n            bloodSugar = new BloodSugar({\n              value: value\n            });\n            _context.prev = 3;\n            _context.next = 6;\n            return bloodSugar.save();\n\n          case 6:\n            savedBloodSugar = _context.sent;\n            res.status(201).json(savedBloodSugar); // Must use \"await\" here, else the try/catch will not work since \"save\" is an asynch function\n\n            _context.next = 14;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](3);\n            console.log(_context.t0);\n            res.status(400).json({\n              message: 'Kunde inte spara blodsocker i databasen!',\n              errors: _context.t0.errors\n            });\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[3, 10]]);\n  }));\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}());\napp.get('/allbloodsugars', /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(req, res) {\n    var bloodsugars;\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            console.log('Inside /allbloodsugars');\n            _context2.prev = 1;\n            _context2.next = 4;\n            return BloodSugar.find();\n\n          case 4:\n            bloodsugars = _context2.sent;\n            res.json(bloodsugars);\n            _context2.next = 12;\n            break;\n\n          case 8:\n            _context2.prev = 8;\n            _context2.t0 = _context2[\"catch\"](1);\n            console.log(_context2.t0);\n            res.status(400).json({\n              message: 'Någonting gick fel!',\n              errors: _context2.t0.errors\n            });\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[1, 8]]);\n  }));\n\n  return function (_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}()); // Start the server\n\napp.listen(port, function () {\n  console.log(\"Server running on http://localhost:\".concat(port));\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlci5qcyJdLCJuYW1lcyI6WyJtb25nb1VybCIsInByb2Nlc3MiLCJlbnYiLCJNT05HT19VUkwiLCJtb25nb29zZSIsImNvbm5lY3QiLCJ1c2VOZXdVcmxQYXJzZXIiLCJ1c2VVbmlmaWVkVG9wb2xvZ3kiLCJQcm9taXNlIiwiY29uc29sZSIsImxvZyIsIkJsb29kU3VnYXIiLCJtb2RlbCIsInZhbHVlIiwidHlwZSIsIk51bWJlciIsInJlcXVpcmVkIiwiY3JlYXRlZEF0IiwiRGF0ZSIsIm5vdyIsInBvcnQiLCJQT1JUIiwiYXBwIiwidXNlIiwiYm9keVBhcnNlciIsImpzb24iLCJnZXQiLCJyZXEiLCJyZXMiLCJzZW5kIiwicG9zdCIsImJvZHkiLCJibG9vZFN1Z2FyIiwic2F2ZSIsInNhdmVkQmxvb2RTdWdhciIsInN0YXR1cyIsIm1lc3NhZ2UiLCJlcnJvcnMiLCJmaW5kIiwiYmxvb2RzdWdhcnMiLCJsaXN0ZW4iXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7Ozs7Ozs7QUFFQSxJQUFNQSxRQUFRLEdBQUdDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxTQUFaLElBQXlCLDZCQUExQzs7QUFDQUMscUJBQVNDLE9BQVQsQ0FBaUJMLFFBQWpCLEVBQTJCO0FBQUVNLEVBQUFBLGVBQWUsRUFBRSxJQUFuQjtBQUF5QkMsRUFBQUEsa0JBQWtCLEVBQUU7QUFBN0MsQ0FBM0I7O0FBQ0FILHFCQUFTSSxPQUFULEdBQW1CQSxPQUFuQjtBQUVBQyxPQUFPLENBQUNDLEdBQVIsQ0FBWSxrQkFBWjs7QUFFQSxJQUFNQyxVQUFVLEdBQUdQLHFCQUFTUSxLQUFULENBQWUsWUFBZixFQUE2QjtBQUM5Q0MsRUFBQUEsS0FBSyxFQUFFO0FBQ05DLElBQUFBLElBQUksRUFBRUMsTUFEQTtBQUVOQyxJQUFBQSxRQUFRLEVBQUU7QUFGSixHQUR1QztBQUs5Q0MsRUFBQUEsU0FBUyxFQUFFO0FBQ1RILElBQUFBLElBQUksRUFBRUksSUFERztBQUVULGVBQVNBLElBQUksQ0FBQ0M7QUFGTDtBQUxtQyxDQUE3QixDQUFuQixDLENBY0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBLElBQU1DLElBQUksR0FBR25CLE9BQU8sQ0FBQ0MsR0FBUixDQUFZbUIsSUFBWixJQUFvQixJQUFqQztBQUNBLElBQU1DLEdBQUcsR0FBRywwQkFBWixDLENBR0E7O0FBQ0FBLEdBQUcsQ0FBQ0MsR0FBSixDQUFRLHVCQUFSO0FBQ0FELEdBQUcsQ0FBQ0MsR0FBSixDQUFRQyx1QkFBV0MsSUFBWCxFQUFSLEUsQ0FLQTs7QUFDQUgsR0FBRyxDQUFDSSxHQUFKLENBQVEsR0FBUixFQUFhLFVBQUNDLEdBQUQsRUFBTUMsR0FBTixFQUFjO0FBQ3pCQSxFQUFBQSxHQUFHLENBQUNDLElBQUosQ0FBUywwQkFBVDtBQUNELENBRkQ7QUFJQVAsR0FBRyxDQUFDUSxJQUFKLENBQVMsY0FBVDtBQUFBLHFFQUF5QixpQkFBT0gsR0FBUCxFQUFZQyxHQUFaO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNoQmYsWUFBQUEsS0FEZ0IsR0FDUGMsR0FBRyxDQUFDSSxJQURHLENBQ2hCbEIsS0FEZ0I7QUFFdkJKLFlBQUFBLE9BQU8sQ0FBQ0MsR0FBUixTQUFtQkcsS0FBbkI7QUFDTW1CLFlBQUFBLFVBSGlCLEdBR0osSUFBSXJCLFVBQUosQ0FBZTtBQUFFRSxjQUFBQSxLQUFLLEVBQUxBO0FBQUYsYUFBZixDQUhJO0FBQUE7QUFBQTtBQUFBLG1CQU1TbUIsVUFBVSxDQUFDQyxJQUFYLEVBTlQ7O0FBQUE7QUFNZkMsWUFBQUEsZUFOZTtBQU9yQk4sWUFBQUEsR0FBRyxDQUFDTyxNQUFKLENBQVcsR0FBWCxFQUFnQlYsSUFBaEIsQ0FBcUJTLGVBQXJCLEVBUHFCLENBU3JCOztBQVRxQjtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQVdyQnpCLFlBQUFBLE9BQU8sQ0FBQ0MsR0FBUjtBQUNBa0IsWUFBQUEsR0FBRyxDQUFDTyxNQUFKLENBQVcsR0FBWCxFQUFnQlYsSUFBaEIsQ0FBcUI7QUFBQ1csY0FBQUEsT0FBTyxFQUFFLDBDQUFWO0FBQXNEQyxjQUFBQSxNQUFNLEVBQUUsWUFBSUE7QUFBbEUsYUFBckI7O0FBWnFCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEdBQXpCOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBZ0JFZixHQUFHLENBQUNJLEdBQUosQ0FBUSxpQkFBUjtBQUFBLHNFQUEyQixrQkFBT0MsR0FBUCxFQUFZQyxHQUFaO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUN6Qm5CLFlBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLHdCQUFaO0FBRHlCO0FBQUE7QUFBQSxtQkFHR0MsVUFBVSxDQUFDMkIsSUFBWCxFQUhIOztBQUFBO0FBR2pCQyxZQUFBQSxXQUhpQjtBQUl2QlgsWUFBQUEsR0FBRyxDQUFDSCxJQUFKLENBQVNjLFdBQVQ7QUFKdUI7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFNdkI5QixZQUFBQSxPQUFPLENBQUNDLEdBQVI7QUFDQWtCLFlBQUFBLEdBQUcsQ0FBQ08sTUFBSixDQUFXLEdBQVgsRUFBZ0JWLElBQWhCLENBQXFCO0FBQUNXLGNBQUFBLE9BQU8sRUFBRSxxQkFBVjtBQUFpQ0MsY0FBQUEsTUFBTSxFQUFFLGFBQUlBO0FBQTdDLGFBQXJCOztBQVB1QjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxHQUEzQjs7QUFBQTtBQUFBO0FBQUE7QUFBQSxLLENBWUY7O0FBQ0FmLEdBQUcsQ0FBQ2tCLE1BQUosQ0FBV3BCLElBQVgsRUFBaUIsWUFBTTtBQUNuQlgsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLDhDQUFrRFUsSUFBbEQ7QUFDRCxDQUZIIiwic291cmNlUm9vdCI6Ii9tbnQvYy9Vc2Vycy90ZXJlbC9PbmVEcml2ZS9Ta3JpdmJvcmQvdGVjaG5pZ28vaW5zdWxpbi1jYWxjL2JhY2tlbmQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZXhwcmVzcyBmcm9tICdleHByZXNzJ1xyXG5pbXBvcnQgYm9keVBhcnNlciBmcm9tICdib2R5LXBhcnNlcidcclxuaW1wb3J0IGNvcnMgZnJvbSAnY29ycydcclxuaW1wb3J0IG1vbmdvb3NlIGZyb20gJ21vbmdvb3NlJ1xyXG5cclxuY29uc3QgbW9uZ29VcmwgPSBwcm9jZXNzLmVudi5NT05HT19VUkwgfHwgXCJtb25nb2RiOi8vbG9jYWxob3N0L2luc3VsaW5cIlxyXG5tb25nb29zZS5jb25uZWN0KG1vbmdvVXJsLCB7IHVzZU5ld1VybFBhcnNlcjogdHJ1ZSwgdXNlVW5pZmllZFRvcG9sb2d5OiB0cnVlIH0pXHJcbm1vbmdvb3NlLlByb21pc2UgPSBQcm9taXNlXHJcblxyXG5jb25zb2xlLmxvZygnU3RhcnRpbmcgYmFja2VuZCcpXHJcblxyXG5jb25zdCBCbG9vZFN1Z2FyID0gbW9uZ29vc2UubW9kZWwoJ0Jsb29kU3VnYXInLCB7XHJcbiAgdmFsdWU6IHtcclxuICAgdHlwZTogTnVtYmVyLFxyXG4gICByZXF1aXJlZDogdHJ1ZSxcclxuICB9LFxyXG4gIGNyZWF0ZWRBdDoge1xyXG4gICAgdHlwZTogRGF0ZSxcclxuICAgIGRlZmF1bHQ6IERhdGUubm93XHJcbiAgfSxcclxuXHJcbn0pO1xyXG5cclxuXHJcblxyXG4vLyBEZWZpbmVzIHRoZSBwb3J0IHRoZSBhcHAgd2lsbCBydW4gb24uIERlZmF1bHRzIHRvIDgwODAsIGJ1dCBjYW4gYmUgXHJcbi8vIG92ZXJyaWRkZW4gd2hlbiBzdGFydGluZyB0aGUgc2VydmVyLiBGb3IgZXhhbXBsZTpcclxuLy9cclxuLy8gICBQT1JUPTkwMDAgbnBtIHN0YXJ0XHJcbmNvbnN0IHBvcnQgPSBwcm9jZXNzLmVudi5QT1JUIHx8IDkwOTBcclxuY29uc3QgYXBwID0gZXhwcmVzcygpXHJcblxyXG5cclxuLy8gQWRkIG1pZGRsZXdhcmVzIHRvIGVuYWJsZSBjb3JzIGFuZCBqc29uIGJvZHkgcGFyc2luZ1xyXG5hcHAudXNlKGNvcnMoKSlcclxuYXBwLnVzZShib2R5UGFyc2VyLmpzb24oKSlcclxuXHJcblxyXG5cclxuXHJcbi8vIFN0YXJ0IGRlZmluaW5nIHlvdXIgcm91dGVzIGhlcmVcclxuYXBwLmdldCgnLycsIChyZXEsIHJlcykgPT4ge1xyXG4gIHJlcy5zZW5kKCdIZWxsbyB3b3JsZCBpbnN1bGluLWNhbGMnKVxyXG59KVxyXG5cclxuYXBwLnBvc3QoJy9ibG9vZHN1Z2FycycsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xyXG4gIGNvbnN0IHt2YWx1ZX0gPSByZXEuYm9keTtcclxuICBjb25zb2xlLmxvZyh0eXBlb2YgdmFsdWUgKVxyXG4gIGNvbnN0IGJsb29kU3VnYXIgPSBuZXcgQmxvb2RTdWdhcih7IHZhbHVlIH0pIFxyXG5cclxuICB0cnkge1xyXG4gICAgY29uc3Qgc2F2ZWRCbG9vZFN1Z2FyID0gYXdhaXQgYmxvb2RTdWdhci5zYXZlKCk7XHJcbiAgICByZXMuc3RhdHVzKDIwMSkuanNvbihzYXZlZEJsb29kU3VnYXIpOyBcclxuICAgIFxyXG4gICAgLy8gTXVzdCB1c2UgXCJhd2FpdFwiIGhlcmUsIGVsc2UgdGhlIHRyeS9jYXRjaCB3aWxsIG5vdCB3b3JrIHNpbmNlIFwic2F2ZVwiIGlzIGFuIGFzeW5jaCBmdW5jdGlvblxyXG4gIH0gY2F0Y2ggKGVycikge1xyXG4gICAgY29uc29sZS5sb2coZXJyKVxyXG4gICAgcmVzLnN0YXR1cyg0MDApLmpzb24oe21lc3NhZ2U6ICdLdW5kZSBpbnRlIHNwYXJhIGJsb2Rzb2NrZXIgaSBkYXRhYmFzZW4hJywgZXJyb3JzOiBlcnIuZXJyb3JzfSk7XHJcbiAgfVxyXG4gIH0pO1xyXG5cclxuICBhcHAuZ2V0KCcvYWxsYmxvb2RzdWdhcnMnLCBhc3luYyAocmVxLCByZXMpID0+IHtcclxuICAgIGNvbnNvbGUubG9nKCdJbnNpZGUgL2FsbGJsb29kc3VnYXJzJylcclxuICAgIHRyeSB7IFxyXG4gICAgICBjb25zdCBibG9vZHN1Z2FycyA9IGF3YWl0IEJsb29kU3VnYXIuZmluZCgpXHJcbiAgICAgIHJlcy5qc29uKGJsb29kc3VnYXJzKTtcclxuICAgIH0gY2F0Y2ggKGVycil7IFxyXG4gICAgICBjb25zb2xlLmxvZyhlcnIpXHJcbiAgICAgIHJlcy5zdGF0dXMoNDAwKS5qc29uKHttZXNzYWdlOiAnTsOlZ29udGluZyBnaWNrIGZlbCEnLCBlcnJvcnM6IGVyci5lcnJvcnN9KTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcblxyXG4vLyBTdGFydCB0aGUgc2VydmVyXHJcbmFwcC5saXN0ZW4ocG9ydCwgKCkgPT4ge1xyXG4gICAgY29uc29sZS5sb2coYFNlcnZlciBydW5uaW5nIG9uIGh0dHA6Ly9sb2NhbGhvc3Q6JHtwb3J0fWApXHJcbiAgfSkiXX0=",
    "map": {
      "version": 3,
      "sources": [
        "server.js"
      ],
      "names": [
        "mongoUrl",
        "process",
        "env",
        "MONGO_URL",
        "mongoose",
        "connect",
        "useNewUrlParser",
        "useUnifiedTopology",
        "Promise",
        "console",
        "log",
        "BloodSugar",
        "model",
        "value",
        "type",
        "Number",
        "required",
        "createdAt",
        "Date",
        "now",
        "port",
        "PORT",
        "app",
        "use",
        "bodyParser",
        "json",
        "get",
        "req",
        "res",
        "send",
        "post",
        "body",
        "bloodSugar",
        "save",
        "savedBloodSugar",
        "status",
        "message",
        "errors",
        "find",
        "bloodsugars",
        "listen"
      ],
      "mappings": ";;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;AAEA,IAAMA,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYC,SAAZ,IAAyB,6BAA1C;;AACAC,qBAASC,OAAT,CAAiBL,QAAjB,EAA2B;AAAEM,EAAAA,eAAe,EAAE,IAAnB;AAAyBC,EAAAA,kBAAkB,EAAE;AAA7C,CAA3B;;AACAH,qBAASI,OAAT,GAAmBA,OAAnB;AAEAC,OAAO,CAACC,GAAR,CAAY,kBAAZ;;AAEA,IAAMC,UAAU,GAAGP,qBAASQ,KAAT,CAAe,YAAf,EAA6B;AAC9CC,EAAAA,KAAK,EAAE;AACNC,IAAAA,IAAI,EAAEC,MADA;AAENC,IAAAA,QAAQ,EAAE;AAFJ,GADuC;AAK9CC,EAAAA,SAAS,EAAE;AACTH,IAAAA,IAAI,EAAEI,IADG;AAET,eAASA,IAAI,CAACC;AAFL;AALmC,CAA7B,CAAnB,C,CAcA;AACA;AACA;AACA;;;AACA,IAAMC,IAAI,GAAGnB,OAAO,CAACC,GAAR,CAAYmB,IAAZ,IAAoB,IAAjC;AACA,IAAMC,GAAG,GAAG,0BAAZ,C,CAGA;;AACAA,GAAG,CAACC,GAAJ,CAAQ,uBAAR;AACAD,GAAG,CAACC,GAAJ,CAAQC,uBAAWC,IAAX,EAAR,E,CAKA;;AACAH,GAAG,CAACI,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAc;AACzBA,EAAAA,GAAG,CAACC,IAAJ,CAAS,0BAAT;AACD,CAFD;AAIAP,GAAG,CAACQ,IAAJ,CAAS,cAAT;AAAA,qEAAyB,iBAAOH,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBf,YAAAA,KADgB,GACPc,GAAG,CAACI,IADG,CAChBlB,KADgB;AAEvBJ,YAAAA,OAAO,CAACC,GAAR,SAAmBG,KAAnB;AACMmB,YAAAA,UAHiB,GAGJ,IAAIrB,UAAJ,CAAe;AAAEE,cAAAA,KAAK,EAALA;AAAF,aAAf,CAHI;AAAA;AAAA;AAAA,mBAMSmB,UAAU,CAACC,IAAX,EANT;;AAAA;AAMfC,YAAAA,eANe;AAOrBN,YAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBV,IAAhB,CAAqBS,eAArB,EAPqB,CASrB;;AATqB;AAAA;;AAAA;AAAA;AAAA;AAWrBzB,YAAAA,OAAO,CAACC,GAAR;AACAkB,YAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBV,IAAhB,CAAqB;AAACW,cAAAA,OAAO,EAAE,0CAAV;AAAsDC,cAAAA,MAAM,EAAE,YAAIA;AAAlE,aAArB;;AAZqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAzB;;AAAA;AAAA;AAAA;AAAA;AAgBEf,GAAG,CAACI,GAAJ,CAAQ,iBAAR;AAAA,sEAA2B,kBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACzBnB,YAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AADyB;AAAA;AAAA,mBAGGC,UAAU,CAAC2B,IAAX,EAHH;;AAAA;AAGjBC,YAAAA,WAHiB;AAIvBX,YAAAA,GAAG,CAACH,IAAJ,CAASc,WAAT;AAJuB;AAAA;;AAAA;AAAA;AAAA;AAMvB9B,YAAAA,OAAO,CAACC,GAAR;AACAkB,YAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBV,IAAhB,CAAqB;AAACW,cAAAA,OAAO,EAAE,qBAAV;AAAiCC,cAAAA,MAAM,EAAE,aAAIA;AAA7C,aAArB;;AAPuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA3B;;AAAA;AAAA;AAAA;AAAA,K,CAYF;;AACAf,GAAG,CAACkB,MAAJ,CAAWpB,IAAX,EAAiB,YAAM;AACnBX,EAAAA,OAAO,CAACC,GAAR,8CAAkDU,IAAlD;AACD,CAFH",
      "sourceRoot": "/mnt/c/Users/terel/OneDrive/Skrivbord/technigo/insulin-calc/backend",
      "sourcesContent": [
        "import express from 'express'\r\nimport bodyParser from 'body-parser'\r\nimport cors from 'cors'\r\nimport mongoose from 'mongoose'\r\n\r\nconst mongoUrl = process.env.MONGO_URL || \"mongodb://localhost/insulin\"\r\nmongoose.connect(mongoUrl, { useNewUrlParser: true, useUnifiedTopology: true })\r\nmongoose.Promise = Promise\r\n\r\nconsole.log('Starting backend')\r\n\r\nconst BloodSugar = mongoose.model('BloodSugar', {\r\n  value: {\r\n   type: Number,\r\n   required: true,\r\n  },\r\n  createdAt: {\r\n    type: Date,\r\n    default: Date.now\r\n  },\r\n\r\n});\r\n\r\n\r\n\r\n// Defines the port the app will run on. Defaults to 8080, but can be \r\n// overridden when starting the server. For example:\r\n//\r\n//   PORT=9000 npm start\r\nconst port = process.env.PORT || 9090\r\nconst app = express()\r\n\r\n\r\n// Add middlewares to enable cors and json body parsing\r\napp.use(cors())\r\napp.use(bodyParser.json())\r\n\r\n\r\n\r\n\r\n// Start defining your routes here\r\napp.get('/', (req, res) => {\r\n  res.send('Hello world insulin-calc')\r\n})\r\n\r\napp.post('/bloodsugars', async (req, res) => {\r\n  const {value} = req.body;\r\n  console.log(typeof value )\r\n  const bloodSugar = new BloodSugar({ value }) \r\n\r\n  try {\r\n    const savedBloodSugar = await bloodSugar.save();\r\n    res.status(201).json(savedBloodSugar); \r\n    \r\n    // Must use \"await\" here, else the try/catch will not work since \"save\" is an asynch function\r\n  } catch (err) {\r\n    console.log(err)\r\n    res.status(400).json({message: 'Kunde inte spara blodsocker i databasen!', errors: err.errors});\r\n  }\r\n  });\r\n\r\n  app.get('/allbloodsugars', async (req, res) => {\r\n    console.log('Inside /allbloodsugars')\r\n    try { \r\n      const bloodsugars = await BloodSugar.find()\r\n      res.json(bloodsugars);\r\n    } catch (err){ \r\n      console.log(err)\r\n      res.status(400).json({message: 'Någonting gick fel!', errors: err.errors});\r\n    }\r\n  });\r\n\r\n\r\n// Start the server\r\napp.listen(port, () => {\r\n    console.log(`Server running on http://localhost:${port}`)\r\n  })"
      ]
    },
    "sourceType": "script",
    "mtime": 1584538287915
  }
}